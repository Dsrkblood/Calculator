{"ast":null,"code":"var _jsxFileName = \"D:\\\\VSCode Projects\\\\LearningReact\\\\ReactRouter\\\\frontend\\\\src\\\\pages\\\\EventDetail.js\",\n  _s = $RefreshSig$();\nimport { json, useLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function EventDetailPage() {\n  _s();\n  const data = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventItem, {\n      event: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n}\n_s(EventDetailPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventDetailPage;\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["json","useLoaderData","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","data","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","request","params","id","eventId","response","fetch","ok","message","status","$RefreshReg$"],"sources":["D:/VSCode Projects/LearningReact/ReactRouter/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { json, useLoaderData } from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\nexport default function EventDetailPage() {\r\n\tconst data = useLoaderData()\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<EventItem event={data}/>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\n\r\nexport async function loader({request,params}){\r\n\tconst id = params.eventId\r\n\tconst response = await fetch('http://localhost:8080/events/' + id)\r\n\t\r\n\tif(!response.ok){\r\n\t\tthrow json({message: 'Could not fetch details for selected event.'},{status: 500})\r\n\t}else{\r\n\t\treturn response;\r\n\t}\r\n}"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACtD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAChD,eAAe,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzC,MAAMC,IAAI,GAAGR,aAAa,CAAC,CAAC;EAC5B,oBACCG,OAAA,CAAAE,SAAA;IAAAI,QAAA,eACCN,OAAA,CAACF,SAAS;MAACS,KAAK,EAAEF;IAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,gBACxB,CAAC;AAEL;AAACP,EAAA,CAPuBD,eAAe;EAAA,QACzBN,aAAa;AAAA;AAAAe,EAAA,GADHT,eAAe;AAUvC,OAAO,eAAeU,MAAMA,CAAC;EAACC,OAAO;EAACC;AAAM,CAAC,EAAC;EAC7C,MAAMC,EAAE,GAAGD,MAAM,CAACE,OAAO;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;EAElE,IAAG,CAACE,QAAQ,CAACE,EAAE,EAAC;IACf,MAAMxB,IAAI,CAAC;MAACyB,OAAO,EAAE;IAA6C,CAAC,EAAC;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EACnF,CAAC,MAAI;IACJ,OAAOJ,QAAQ;EAChB;AACD;AAAC,IAAAN,EAAA;AAAAW,YAAA,CAAAX,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}