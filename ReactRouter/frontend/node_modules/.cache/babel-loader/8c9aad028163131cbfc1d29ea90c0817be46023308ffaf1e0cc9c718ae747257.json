{"ast":null,"code":"var _jsxFileName = \"D:\\\\VSCode Projects\\\\LearningReact\\\\ReactRouter\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events.\" };\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    // \tstatus: 500,\n    // });\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["D:/VSCode Projects/LearningReact/ReactRouter/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from \"react-router-dom\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n\tconst {events} = useLoaderData()\r\n\r\n\r\n\treturn <Await resolve={events}></Await>\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n\tconst response = await fetch(\"http://localhost:8080/events\");\r\n\r\n\tif (!response.ok) {\r\n\t\t// return { isError: true, message: \"Could not fetch events.\" };\r\n\t\t// throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\r\n\t\t// \tstatus: 500,\r\n\t\t// });\r\n\t\tthrow json(\r\n\t\t\t{ message: \"Could not fetch events.\" },\r\n\t\t\t{\r\n\t\t\t\tstatus: 500,\r\n\t\t\t}\r\n\t\t);\r\n\t} else {\r\n\t\treturn response;\r\n\t}\r\n}\r\n\r\nexport function loader() {\r\n\treturn defer({\r\n\t\tevents: loadEvents()\r\n\t})\r\n}\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM;IAACC;EAAM,CAAC,GAAGT,aAAa,CAAC,CAAC;EAGhC,oBAAOM,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED;EAAO;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AACxC;AAACN,EAAA,CALQD,UAAU;EAAA,QACDP,aAAa;AAAA;AAAAe,EAAA,GADtBR,UAAU;AAOnB,eAAeA,UAAU;AAEzB,eAAeS,UAAUA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACjB;IACA;IACA;IACA;IACA,MAAMlB,IAAI,CACT;MAAEmB,OAAO,EAAE;IAA0B,CAAC,EACtC;MACCC,MAAM,EAAE;IACT,CACD,CAAC;EACF,CAAC,MAAM;IACN,OAAOJ,QAAQ;EAChB;AACD;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACxB,OAAOpB,KAAK,CAAC;IACZO,MAAM,EAAEO,UAAU,CAAC;EACpB,CAAC,CAAC;AACH;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}